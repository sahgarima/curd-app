{"version":3,"sources":["logo.svg","components/Read/Read.js","Redux/actions.js","components/Create/Create.js","components/Dashboard/Dashboard.js","App.js","serviceWorker.js","Redux/reducer.js","index.js"],"names":["module","exports","Read","props","useState","id","data","first","last","address","state","setState","handleChange","e","target","name","value","prevState","isUpdate","scope","className","type","onClick","edit","removeRow","onChange","max","update","cancleUpdate","addItem","payload","editRow","Math","floor","random","createRow","cancleCreate","Dashboard","isCreateItem","dispatch","obj","updateRow","deleteRow","this","allList","colSpan","map","index","key","updateid","Component","connect","App","Boolean","window","location","hostname","match","initialstate","reducer","action","concat","filter","item","content","i","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da8fc9a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React ,{useState}from 'react';\nexport default function Read(props) {\n    let [state, setState] = useState({ id: props.data.id, first: props.data.first ,last: props.data.last, address: props.data.address })\n\n\n    function deleteRow() {\n        props.removeRow(props.data.id)\n    }\n    function edit() {\n        props.edit(props.data.id)\n    }\n    function update() {\n        props.update(state)\n    }\n    function cancleUpdate(){\n        props.cancleUpdate()\n    }\n\n    const handleChange = e => {\n        const { name, value } = e.target;\n        setState(prevState => ({\n            ...prevState,\n            \n            [name]: value\n        }));\n    };\n    return (\n        <>\n            {!props.isUpdate && (\n                <tr>\n                    <th scope=\"row\">{props.id}</th>\n                    <td>{props.data.first}</td>\n                    <td>{props.data.last}</td>\n                    <td>{props.data.address}</td>\n                    <td>\n                        <span className=\"table-remove\"><button type=\"button\"\n                            className=\"btn btn-danger btn-rounded btn-sm my-0\" onClick={edit}>Edit</button></span>\n                    </td>\n                    <td>\n                        <span className=\"table-remove\"><button type=\"button\" onClick={deleteRow}\n                            className=\"btn btn-danger btn-rounded btn-sm my-0\">Remove</button></span>\n                    </td>\n                </tr>\n            )}\n\n            {props.isUpdate && (\n                <tr>\n                    <th scope=\"row\">{props.id}</th>\n                    <td><input name=\"first\" value={state.first} type=\"text\" onChange={handleChange} /></td>\n                    <td><input name=\"last\" value={state.last} type=\"text\" onChange={handleChange} /></td>\n                    <td><input name=\"address\" value={state.address} type=\"text\" onChange={handleChange} max=\"11\" /></td>\n                    <td>\n                        <span className=\"table-remove\"><button type=\"button\"\n                            className=\"btn btn-danger btn-rounded btn-sm my-0\" onClick={update}>Update</button></span>\n                    </td>\n                    <td>\n                <span className=\"table-add\"><button type=\"button\"\n                    className=\"btn btn-secondary btn-rounded btn-sm my-0\" onClick={cancleUpdate}>Cancel</button></span>\n            </td>\n                </tr>\n            )\n            }\n        </>\n    )\n\n}","\nexport function getList() {  \n    return {type:'GET_LIST'}\n    }  \n;  \nexport function addItem(data) {  \n    return {type:'ADD_ITEM',payload:data}\n    }  \n;  \nexport function createRow(data) {  \n    return {type:'CREATE_LIST',payload:data}\n    }  \n;  \nexport function deleteRow(id) {  \n    return {type:'DELETE_LIST',id:id}\n    }  \n;  \nexport function updateRow(obj) {  \n    return {type:'UPDATE_LIST',payload:obj}\n    }  \n;  \nexport function editRow(id) {  \n    return {type:'EDIT_LIST',id:id}\n    }  \n;  ","import React, { useState } from 'react';\n\nexport default function Read(props) {\n    let [state, setState] = useState({ id: Math.floor(Math.random() * (999 - 100 + 1) + 100), first: \"\", last: \"\", address: \"\" })\n\n    function addItem() {\n        props.createRow(state)\n    }\n    function cancleCreate() {\n        props.cancleCreate()\n    }\n    const handleChange = e => {\n        const { name, value } = e.target;\n        setState(prevState => ({\n            ...prevState,\n\n            [name]: value\n        }));\n    };\n    return (\n        <tr>\n            <td></td>\n            <td><input name=\"first\" value={state.first} type=\"text\" onChange={handleChange} /></td>\n            <td><input name=\"last\" value={state.last} type=\"text\" onChange={handleChange} /></td>\n            <td><input name=\"address\" value={state.address} type=\"text\" onChange={handleChange} max=\"11\" /></td>\n            <td>\n                <span className=\"table-add\"><button type=\"button\"\n                    className=\"btn btn-primary btn-rounded btn-sm my-0\" onClick={addItem}>Add Row</button></span>\n            </td>\n            <td>\n                <span className=\"table-add\"><button type=\"button\"\n                    className=\"btn btn-secondary btn-rounded btn-sm my-0\" onClick={cancleCreate}>Cancel</button></span>\n            </td>\n        </tr>\n    )\n\n}","import React, { Component } from 'react';\nimport styles from './Dashboard.scss'\nimport Read from '../Read/Read'\nimport { connect } from 'react-redux';\nimport { getList, addItem, createRow, deleteRow, updateRow, editRow } from '../../Redux/actions';\nimport Create from '../Create/Create'\n\nconst mStateToProps = (state) => {\n    return state\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        // dispatching plain actions\n        increment: () => dispatch({ type: 'INCREMENT' }),\n        decrement: () => dispatch({ type: 'DECREMENT' }),\n        reset: () => dispatch({ type: 'RESET' })\n    }\n}\nclass Dashboard extends Component {\n\n    constructor(props) {\n        super(props)\n    }\n    componentDidMount() {\n        this.props.dispatch(getList())\n    }\n    addItem = () => {\n        if (!this.props.isCreateItem) this.props.dispatch(addItem(true))\n\n    }\n    edit = (id) => {\n        this.props.dispatch(editRow(id))\n    }\n    createRow = (obj) => {\n        if (obj.first != \"\") {\n            this.props.dispatch(createRow(obj));\n        }\n\n        this.props.dispatch(addItem(false));\n\n    }\n    cancleCreate = () => {\n        this.props.dispatch(addItem(false));\n    }\n    cancleUpdate = () => {\n        this.props.dispatch(editRow(0));\n    }\n    updateRow = (obj) => {\n        if (obj.first != \"\") {\n            this.props.dispatch(updateRow(obj));\n        }\n        this.props.dispatch(editRow(0));\n    }\n    removeRow = (id) => {\n        this.props.dispatch(deleteRow(id));\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"text-center gap-top\">\n                    <h2>CURD Application</h2>\n                </header>\n                <div className=\"container\">\n\n                    <div className=\"page-header gap-top\">\n                        <div className=\"pull-right col-sm\">\n                            <button className=\"btn btn-outline-success\" onClick={this.addItem} type=\"button\">+ Add Info</button>\n                        </div>\n                        <div className=\"clearfix\"></div>\n                    </div>\n                    <div className=\"row gap-top\">\n                        <div className=\"col-sm\">\n                            <table className=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th scope=\"col\">S.N</th>\n                                        <th scope=\"col\">First</th>\n                                        <th scope=\"col\">Last</th>\n                                        <th scope=\"col\">Address</th>\n                                        <th scope=\"col\">Update</th>\n                                        <th scope=\"col\">Delete</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        this.props.isCreateItem && (\n                                            <Create createRow={this.createRow} cancleCreate={this.cancleCreate} />\n\n                                        )\n                                    }\n                                    {\n                                        this.props.allList == 0 && (\n                                            <tr> <td colSpan=\"6\">No Data Found</td></tr>\n\n                                        )\n                                    }\n                                    {\n                                        this.props.allList && this.props.allList.map((data, index) => {\n                                            return (<Read key={index} data={data} id={index + 1} removeRow={this.removeRow} edit={this.edit} update={this.updateRow} isUpdate={this.props.updateid == data.id} cancleUpdate={this.cancleUpdate}></Read>)\n                                        })\n                                    }\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n\n                </div>\n\n            </div >\n        );\n    }\n}\n\nexport default connect(mStateToProps)(Dashboard)\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Dashboard from './components/Dashboard/Dashboard'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n      <footer className=\"page-footer font-small blue pt-4\">\n        Developed By:<strong> Garima Sah</strong>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialstate = {\n    allList: [\n        { id: 1, first: \"sample \", last: \"data\", address: \"sector 22\" },\n        { id: 2, first: \"sample 2\", last: \"data 2\", address: \"sector 22 22\" },\n        { id: 3, first: \"sample 3\", last: \"data 3\", address: \"sector 22\" }\n    ],\n    isCreateItem: false,\n    updateid:0\n};\n\n\nconst reducer = (state = initialstate, action) => {\n    switch (action.type) {\n        case 'GET_LIST':\n            return {\n                ...state\n            };\n        case 'ADD_ITEM':\n            return {\n                ...state,\n                isCreateItem:action.payload\n            };\n        case 'CREATE_LIST':\n            return {\n                ...state,\n                allList: state.allList.concat(action.payload) \n            };\n        case 'DELETE_LIST':\n            return {\n                ...state,\n                allList: state.allList.filter(item => item.id !== action.id)\n            };\n        case 'UPDATE_LIST':\n            return {\n                ...state,\n                allList:state.allList.map(    \n                    (content, i) => content.id === action.payload.id ? action.payload\n                                            : content) \n            };\n             case 'EDIT_LIST':\n            return {\n                ...state,\n                updateid:action.id\n            };\n\n        default:\n            return state;\n    }\n\n}\nexport default reducer;  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './Redux/reducer';\n\nconst store = createStore(reducer);\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n      <App />\n  </Provider> </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}